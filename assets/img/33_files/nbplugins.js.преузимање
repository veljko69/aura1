function getSTRING(string){
    return string;
}

(function( $ ){

    ;(function ( $, window, document, undefined ) {

        // The actual plugin constructor
        var Validate = function (element, options) {

            this.$element = $(element);
            this.$parsley;

            this.options = {
                formData: {},
                remoteUrl: this.$element.data('remote-url'),
                alertContainer: this.$element.find('.alert'),
                refreshPage : false,
                validateOnFocusOut: true
            };

            this.options = $.extend( {}, this.options, options) ;

            this.init(options);
        };

        Validate.prototype = {

            init: function (options) {
                $.extend(this.options, options);

                this.$parsley = this.$element.parsley();

                this.listenFieldValidatedSuccess();
                this.listenFieldValidatedError();
                this.listenFieldFocusOut();
                this.listenFormValidated();

                this.trigger('initialize');
            },

            listenFormValidated: function(){
                var self = this;

                this.$parsley.subscribe('parsley:form:validated', function(formInstance) {

                    if(typeof self.options.remoteUrl !== "undefined" && self.options.remoteUrl){
                        formInstance.submitEvent.preventDefault();
                    } else {
                        self.setButtonSubmitted();
                        return;
                    }

                    if(!formInstance.isValid()){
                        return;
                    }

                    //submit remote if it has been setted
                    self.submitRemote();
                });
            },

            listenFieldValidatedSuccess: function(){
                this.$parsley.subscribe('parsley:field:success', function (fieldInstance) {
                    fieldInstance.$element.parents('.form-group').removeClass('form-group-error');
                });
            },

            listenFieldValidatedError: function(){
                this.$parsley.subscribe('parsley:field:error', function (fieldInstance) {
                    fieldInstance.$element.parents('.form-group').addClass('form-group-error');
                });
            },

            resetForm: function(){
                this.$element.find('input, textarea').val('').prop('checked', false);
                this.$parsley.reset();
                this.resetAlertContainer();
            },

            resetAlertContainer: function(){
                this.options.alertContainer.removeClass('alert-danger alert-success').addClass('hidden').html('');
            },

            hideAlertContainer: function(){
                this.options.alertContainer.addClass('hidden');
            },

            showAlertContainer: function(){
                this.options.alertContainer.removeClass('hidden');
            },

            setAlertSuccess: function(msg){
                this.resetAlertContainer();
                this.showAlertContainer();
                this.options.alertContainer.addClass('alert-success').html(msg);
            },

            setAlertError: function(msg){
                this.resetAlertContainer();
                this.showAlertContainer();
                this.options.alertContainer.addClass('alert-danger').html(msg);
            },

            setRemoteSuccess: function(msg){
                this.resetForm();
                this.setAlertSuccess(msg);
                this.trigger('remoteSuccess');
            },

            setRemoteError: function(msg){
                this.setAlertError(msg);
                this.trigger('remoteError');
            },

            setButtonSubmitted: function($btn){
                //get added hidden fields that associates to the submitted button
                var $originallyClicked = this.$element.find('input[rel=originallyclicked]');

                //for has been submitted and some hidden field that associates
                //to the submitted button has been already added
                if(typeof $btn === "undefined" && $originallyClicked.length){
                    return;
                }

                //no hidden fields that associates to the submitted button has been added
                if(typeof $btn === "undefined" && !$originallyClicked.length){
                    $btn = this.$element.find('[type=submit]');
                }

                //remove previously added hidden fields
                if($originallyClicked.length){
                    $originallyClicked.remove();
                }

                //add hidden field that associates to the latest submitted button
                this.$element.append($("<input>").attr("type", "hidden")
                                                 .attr("name", $btn.attr('name'))
                                                 .attr("rel", 'originallyclicked')
                                                 .val("1"));
            },

            submitRemote: function(){
                var self = this;
                var idForm = this.$element.attr('id');

                var formData = self.$element.serializeObject();

                 //todo cuvanje podatala u bazi
                 var saveData = function(self, formData){
                     var loaderbtn               = $(self.options.alertContainer.context).find('.confirm-loader');
                     $(loaderbtn).addClass('active');
                     $.ajax({
                         type: "POST",
                         url: self.options.remoteUrl,
                         data: $.extend(formData, self.options.formData),
                         contentType: "application/x-www-form-urlencoded;charset=UTF-8",
                         dataType: 'json',
                         success: function(ret){

                             if(ret.flag){

                                 self.setRemoteSuccess(ret.info);

                                 if(self.$element.hasClass('login_form')){
                                     nbshopJS.CustomEventTrigger('loginUser',ret.f_user_gtm);
                                 }

                                 if(self.options.refreshPage){
                                     if(ret.flagRefreshPage){
                                         setTimeout(window.location = ret.backUrl, 2000);
                                     }
                                 }
                                 $(loaderbtn).removeClass('active');
                             }else{
                                 self.setRemoteError(ret.info);
                                 $(loaderbtn).removeClass('active');
                             }
                         }
                     });
                 };

                 //todo ukoliko posotje fajlovi na formi
                 if(idForm != "undefined" && $("#"+idForm+" .files_input").length > 0){

                     var counterFiles = 0;
                     var numberFiles  = 0; //$( "#"+idForm+" .files_input" ).size();
                     var filesObject  = [];

                     var flagSave = false;
                     $("#"+idForm+" .files_input").each(function (event) {
                         if($(this).val() != ''){
                             flagSave = true;
                             numberFiles++;
                         }
                     });

                     if(flagSave){
                         $("#"+idForm+" .files_input").each(function (event) {
                             if($(this).val() != '') {
                                 //todo radimo upload fajlova
                                 var files = this.files,
                                     name_field = $(this).attr('name');
                                 $.each(this.files, function (index, file) {
                                     var reader = new FileReader();
                                     reader.onload = function (event) {
                                         //novo
                                         counterFiles++;
                                         object = {};
                                         object.file_name = file.name;
                                         object.name_field = name_field;
                                         object.data = event.target.result;
                                         filesObject.push(object);

                                         if (numberFiles == counterFiles) {
                                             formData = $.extend(formData, {files: filesObject});
                                             //todo ukoliko prebaceni na server onda radimo cuvanje registracije
                                             saveData(self, formData);
                                         }
                                     };
                                     reader.readAsDataURL(file);
                                 });
                             }

                         });
                     }else{
                         saveData(self, formData);
                     };
                 }else{
                     saveData(self, formData);
                 }
            },

            addFieldRemoteValidate: function($field, query){
                var self = this,
                    dataRemoteURL = $field.data('validation-remote'),
                    dataRemoteRuleName = $field.data('validation-remote-validator');

                if(!dataRemoteURL || !dataRemoteRuleName){
                    return;
                }
                $field.parsley().addAsyncValidator(
                    dataRemoteRuleName, function(xhr){
                        var rule = $field.parsley();
                        var ret = $.parseJSON(xhr.responseText);

                        window.ParsleyUI.removeError(rule, 'remote');
                        window.ParsleyUI.removeError(rule, dataRemoteRuleName);

                        if(ret.flag){
                            if(typeof ret.data !== "undefined"){
                                self.triggerField($field, 'remoteSuccessData', ret.data);
                            }
                            return 200;
                        }

                        window.ParsleyUI.addError(rule, dataRemoteRuleName, ret.info);

                        if(typeof ret.data !== "undefined"){
                            self.triggerField($field, 'remoteErrorData', ret.data);
                        }
                        return false;
                    }, dataRemoteURL, { data: query }
                );
            },

            trigger: function(name, data){
                this.triggerField(this.$element, name, data);
            },

            triggerField: function($field, name, data){
                $field.trigger('nb.validate.'+name, data);
            },

            listenFieldFocusOut: function(){
                if(!this.options.validateOnFocusOut) return;

                this.$element.find('.form-control, .styled-select select').on('focusout change', function(){
                    var $field = $(this).parsley();
                    $field.validate();
                });
            }

        };

        /**
	 * The jQuery Plugin for the form validation
	 * @public
	 */
	$.fn.validate = function(option) {
            var args = Array.prototype.slice.call(arguments, 1);

            return this.each(function() {
                var $this = $(this),
                    data = $this.data('nb.validate');

                if (!data) {
                    data = new Validate(this, typeof option == 'object' && option);
                    $this.data('nb.validate', data);
                }

                if (typeof option == 'string' && option.charAt(0) !== '_') {
                    data[option].apply(data, args);
                }
            });
	};

	/**
	 * The constructor for the jQuery Plugin
	 * @public
	 */
	$.fn.validate.Constructor = Validate;

    })( jQuery, window, document );


    /*!
    * Plugin name: handleSlider
    * Initiates OWL Carousel
    * Custom options may be specified
    * Original author: NBSoft
    * Version: 1.0
    */

/*owl plugin start*/
//    $.fn.handleSlider = function(options){
//
//        var $this = this,
//            $wrapper = $this.parents('.slider-wrapper'),
//            $navigation = $wrapper.find('.slider-navigation'),
//            navIconArrowLeft = $navigation.length && $navigation.data('arrow-left') ? $navigation.data('arrow-left') : 'icon-caret-left',
//            navIconArrowRight = $navigation.length && $navigation.data('arrow-right') ? $navigation.data('arrow-right') : 'icon-caret-right',
//            dataItems = options.items ? options.items : $this.data('items') ? $this.data('items') : 6;
//
//        var dataItemsXS = $this.data('items-xs');
//        var dataItemsSM = $this.data('items-sm');
//        var dataItemsMD = $this.data('items-md');
//        var dataItemsLT = $this.data('items-lt');
//
//        var settings = $.extend({
//            margin: 20,
//            autoplay: false,
//            animateOut: false,
//            loop: true,
//            merge: false,
//            nav: true,
//            navContainer: $navigation,
//            navText: ['<i class="'+navIconArrowLeft+' slider-prev ease-slow"></i>', '<i class="'+navIconArrowRight+' slider-next ease-slow"></i>'],
//            dots: true, //slide by page would not work if dots are set to false!
//            lazyLoad: false,
//            slideBy: 'page',
//            smartSpeed: 200,
//            responsive: {
//                // breakpoint from 0 up
//                0: {
//                    items: dataItemsXS > 0 ? dataItemsXS : dataItems == 1 ? 1 : 2
//                },
//                // breakpoint from 480 up
//                480: {
//                    items: dataItemsXS > 0 ? dataItemsXS : Math.round(dataItems / 3)
//                },
//                // breakpoint from 768 up
//                768: {
//                    items: dataItemsSM > 0 ? dataItemsSM : Math.round(dataItems / 2)
//                },
//                // breakpoint from 960 up
//                960: {
//                    items: dataItemsMD > 0 ? dataItemsMD : Math.round(dataItems * 2 / 3)
//                },
//                1200: {
//                    items: dataItemsLT > 0 ? dataItemsLT : Math.round(dataItems * 2 / 3)
//                },
//                // breakpoint from 1024 up
//                1600: {
//                    items: dataItems
//                }
//            },
//            onInitialized: function(el){
//                if(typeof options.addLoadedClass !== "undefined" && !options.addLoadedClass) return;
//
//                if($(this)[0].num.active == $(this)[0].num.oItems){
//                    $navigation.addClass('hidden');
//                }
//
//                $wrapper.length
//                    ? $wrapper.addClass('loaded')
//                    : $this.addClass('loaded');
//            },
//            onResized: function(){
//                $('.slider').removeClass("ease-slow owl-carousel owl-theme owl-loaded");
//                    setTimeout(function(){
//                        $('.slider').addClass("ease-slow owl-carousel owl-theme owl-loaded");
//                    }, 250);
//            }
//        }, options );
//
//        if(settings.items === 1){
//            settings.responsive = { 0: { items: 1 } };
//        }
//
//        var slider = $this.owlCarousel(settings);
//
//        if($this.find('.owl-item:not(.cloned)').length <= 1 && settings.navContainer){
//            settings.navContainer.hide();
//        }
//
//        return slider;
//    };

/* owl plugin end*/

/*!
* Plugin name: nbHandleSlider
* Initiates Slick Carousel
* Custom options may be specified
* Original author: NBSoft
* Version: 2.0
*/
    $.fn.nbHandleSlider = function(options){
        var $this = this,
            $wrapper        = $this.parents('.slider'),
            $navigation     = $wrapper.children('.slider-arrows');
            $navigation     = $wrapper.find('.slider-arrows');

        var settings = $.extend({
            //options go here
            appendArrows: $navigation,
            prevArrow: '<div class="slider-arrow slider-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></div>',
            nextArrow: '<div class="slider-arrow slider-next"><i class="fa fa-angle-right" aria-hidden="true"></i></div>'
        }, options );

        var slider = $this.slick(settings);

        return slider;

    };

    $.fn.nbHandleSliderLev2 = function(options){
        var $this = this,
            $wrapper        = $this.parents('.slider-level2'),
            $navigation     = $wrapper.children('.slider-arrows');

        var settings = $.extend({
            //options go here
            appendArrows: $navigation,
            prevArrow: '<div class="slider-arrow slider-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></div>',
            nextArrow: '<div class="slider-arrow slider-next"><i class="fa fa-angle-right" aria-hidden="true"></i></div>'
        }, options );

        var slider = $this.slick(settings);

        return slider;

    };

/*!
* Plugin name: handleSlider
* Initiates Slick Carousel
* Custom options may be specified
* Original author: NBSoft
* Version: 2.0
*/
    $.fn.handleSlider = function(options){
        var $this = this,
        $wrapper        = $this.parents('.slider-wrapper'),
        $navigation     = $wrapper.find('.slider-arrows'),
        dataItems       = $this.data('items'),
        dataItemsXXS    = $this.data('items-xxs'),
        dataItemsXS     = $this.data('items-xs'),
        dataItemsSM     = $this.data('items-sm'),
        dataItemsMD     = $this.data('items-md'),
        dataSpeed       = $this.data('speed');

        var settings = $.extend({
            //options go here
            speed: dataSpeed > 0 ? dataSpeed : 300,
            slidesToShow: dataItems,
            slidesToScroll: dataItems,
            arrows: true,
            appendArrows: $navigation,
            prevArrow: '<div class="slider-arrow slider-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></div>',
            nextArrow: '<div class="slider-arrow slider-next"><i class="fa fa-angle-right" aria-hidden="true"></i></div>',
            responsive: [
                {
                  breakpoint: 1400,
                  settings: {
                    slidesToShow: dataItemsMD,
                    slidesToScroll: dataItemsMD
                  }
                },
                {
                  breakpoint: 1024,
                  settings: {
                    slidesToShow: dataItemsSM > 0 ? dataItemsSM : Math.round(dataItems / 2),
                    slidesToScroll: dataItemsSM > 0 ? dataItemsSM : Math.round(dataItems / 2)
                  }
                },
                {
                  breakpoint: 768,
                  settings: {
                    slidesToShow: dataItemsXS > 0 ? dataItemsXS : Math.round(dataItems / 2),
                    slidesToScroll: dataItemsXS > 0 ? dataItemsXS : Math.round(dataItems /2)
                  }
                },
                {
                  breakpoint: 480,
                  settings: {
                    slidesToShow: dataItemsXXS > 0 ? dataItemsXXS : Math.round(dataItems / 2),
                    slidesToScroll: dataItemsXXS > 0 ? dataItemsXXS : Math.round(dataItems /2)
                  }
                }
              ]
        }, options );

        var slider = $this.slick(settings);

        return slider;

    };

    /*!
    * Plugin name: reinitSlider
    * Reinitiates Slick Carousel with same options
    * It is used when slider doesn't have dimensions upon page load (eg. tabs, modals)
    * Original author: NBSoft
    * Version: 1.0
    */

    $.fn.reinitSlider = function(){
        var $this = this;
        var slider = $this.slick('setPosition');

        return slider;
    };

    /* IMPORTED PLUGINS */

    $.fn.serializeObject = function(){
        var obj = {};

        $.each( this.serializeArray(), function(i,o){
            var n = o.name,
            v = o.value;

            obj[n] = obj[n] === undefined ? v
                : $.isArray( obj[n] ) ? obj[n].concat( v )
                : [ obj[n], v ];
        });

        return obj;
    };

})( jQuery );
